// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transactions.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getTransactions = `-- name: GetTransactions :many
SELECT id, user_id, order_id, transaction_date, amount, payment_method, status, created_at, updated_at FROM transactions
`

func (q *Queries) GetTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrderID,
			&i.TransactionDate,
			&i.Amount,
			&i.PaymentMethod,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserTransactionsWithinTimeframe = `-- name: GetUserTransactionsWithinTimeframe :many
SELECT 
    DATE_TRUNC('hour', transaction_date) AS transac_hour,
    user_id,
    COUNT(*) AS transac_count
FROM transactions
GROUP BY transac_hour, user_id
ORDER BY transac_hour DESC, transac_count DESC
LIMIT 10000
`

type GetUserTransactionsWithinTimeframeRow struct {
	TransacHour  pgtype.Interval
	UserID       int64
	TransacCount int64
}

func (q *Queries) GetUserTransactionsWithinTimeframe(ctx context.Context) ([]GetUserTransactionsWithinTimeframeRow, error) {
	rows, err := q.db.Query(ctx, getUserTransactionsWithinTimeframe)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserTransactionsWithinTimeframeRow
	for rows.Next() {
		var i GetUserTransactionsWithinTimeframeRow
		if err := rows.Scan(&i.TransacHour, &i.UserID, &i.TransacCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
